Documentation of my Maxima Lisp-only build procedure under Windows

Based on INSTALL.lisp

Roland Salz 2017-04-04

Maxima can be built using a purely Lisp-based procedure. This procedure is not yet as 
polished as the GNU Autotools system described in the file INSTALL. However, it may 
be more convenient on a system (e.g., Windows) which does not have the GNU Autotools installed.

Notes about known limitations: 
- xmaxima cannot be built using this procedure.
- Plotting on Windows does not (yet) work using this procedure.
- The documentation cannot be build completely (PDF is missing). 
	Perl is needed both for building the online-help and the html version.
- Gnuplot does not yet work.
- wxMaxima cannot be included yet.

To build Maxima:

(1) Download latest Maxima release tarball and extract source code from it into Maxima/tarballs.
		The tarball contains the complete documentation of the latest release with the exception of its pdf version.
		In case the documentation does not need to be built, it can be copied from the tarball into the build-directory:

(1a) For the online help: From doc/info take maxima-index.lisp and all files *.info* and copy them into 
		 doc/info of the build-directory.
		 
(1b) For the html version: From doc/info take all files *.html and copy them into doc/info of the build-directory.

(1c) Copy share/doc/maxima.pdf from the latest Maxima installer into doc/info of the build directory.

(2)	Select branch of Maxima/Repos/rMaxima from which to build. Pull master and rebase branch on master first
		in order to have the latest git snapshot from sourceforge.

(3) Copy local repository into Maxima/builds and rename it appropriately. 

(4)	The following steps can be executed either using a Windows command line or emacs/slime
		(note that dumping can be done only from the command line):

(4a) Open a windows shell and cd to the top-level directory of the Maxima build (i.e., the directory which contains 
		src/, tests/, share/, and other directories). Then launch your Lisp implementation. Alternatively,
		
(4b) Preset the top-level directory of the Maxima build in the first line of c:/users/<username>/start-sbcl-<version>.bat 
		 and launch emacs/slime. Alternatively use  
		
		(setf *default-pathname-defaults #P"c:/path-to-maxima-directory/") (Don't forget the slash at the end.)
		
		from within emacs/slime to address the top-level directory. Enter *default-pathname-defaults* to check the directory.

(5) Possibly set debugger options for the compile process, if not yet done in the init file of your
		lisp implementation (for sbcl: .sbclrc), to get sbcl's and slime's full debugging support:

		(declaim (optimize (debug 3)))
		
(6) Load the file configure.lisp:

    (load "configure.lisp")

(7) Generate configuration files:

    (configure)

    You will be prompted for several inputs. Press carriage return to accept the default values.

    The configure process can be automated through the use of keyword arguments to configure. For example,

    (configure :is-not-win32 t :maxima-version "5.39.0" :interactive nil)

    will assume non-windows, set this version number, use the default values for all other options 
		and will not prompt for any input. See the file configure.lisp for more details.

(8a) Quit Lisp, 
    
    (quit)
		
		then cd to the directory src/ and restart Lisp. Or

(8b) Stay in emacs/slime and to change the directory use
		
		(setf *default-pathname-defaults* #P"c:/path-to-maxima-directory/src/"). (Don't forget the slash at the end.)

		Maxima builds with defsystem. The file maxima-build.lisp is provided for rudimentary guidance in using defsystem. 
		Experts should feel free to subsitute their knowledge of defsystem for the following steps.

(9) Load maxima-build.lisp:

    (load "maxima-build.lisp")

(10) Compile the Lisp source code. For sbcl it will be placed in a newly 
		 created subdirectory named <top-level maxima directory>/src/binary-sbcl

    (maxima-compile)

(11) Quit Lisp or emacs/slime.

(12) Restart Lisp in /src again.

(13) Load the compiled Lisp files:

    (load "maxima-build.lisp")
    (maxima-load)

(14) Run Maxima from the loaded image.

    (cl-user::run)

    That should bring up the Maxima input prompt. If the documentation has been included from the tarball,
		there should be no error message from Maxima about not being able to set up the help system.
		
(15) Enter

		quit();
		
		at the input prompt to terminate Maxima. 
		(Under emacs/slime the prompt will now be MAXIMA>. Enter (in-package "CL-USER")
		to come back to the original prompt. Note the capital letters.)
		
(16) Repeat steps (11) till (13), but this time do not use emacs/slime!

(17) Dump the image, and if the Lisp implementation allows you to
    specify a start-up function, specify USER::RUN.

    There is a function MAXIMA-DUMP in src/maxima-build.lisp to dump an image.
    At present it works for Clisp, SBCL, GCL, CMUCL, Scieneer, Allegro and CCL.
    (maxima-dump) works only when multi-threading is disabled. So it is not possible under emacs/slime.
    Some Lisp implementations (SBCL, GCL, CMUCL, Scieneer, maybe others) terminate after saving the image.

    (maxima-dump)
		
		This should have created maxima.core, located for sbcl in src/binary-sbcl.

(18) Execute the saved image.

    Each Lisp implementation allows to specify the name of the image to be executed in a slightly different way. 
		Two scripts, maxima and maxima.bat, have been customized by (configure) in step (7) to specify the command line options appropriately.

    For Windows without Bourne shell (normal case) use

    maxima.bat.
		
(18a)	Use a windows shell, cd to src and run maxima.bat. Or

(18b)	Customize c:/users/<username>/Appdata/roaming/.emacs to invoke the correct Maxima build. Start emacs and then type M-x (i)maxima.
		
    For Unix systems and Windows with Bourne shell (cygwin) use

    sh maxima
     --- or ---
    chmod a+x maxima
    ./maxima

    (Even if Bourne shell is not available on your system, it is worth looking at the way images are invoked at the end of the script.)

(19) Test the build. (But don't do it from imaxima, because otherwise rtest6.mac and rtest6b.mac will give 1 + 5 test failures.)

(19a)	For this purpose temporarily disable your 
			c:/users/<username>/maxima/maxima-init.lisp -> maxima-init.disabled.lisp and
			c:/users/<username>/maxima/maxima-init.mac -> maxima-init.disabled.mac 
			files before invoking maxima.bat. 

(19b)	Load tests/rtest9a.mac and tests/rtest_limit.mac into the editor and change line-endings from Windows/DOS (CR/LF) to Unix (LF). 
Otherwise there will be 24 more test failures.
			
(19c)	Then at the Maxima prompt, enter:

			run_testsuite();
		
			If the files for the online-help were loaded from the tarball in step (1a), then there should be zero test failures, otherwise only one.
			
(19c) Reenable your init files afterwards.

(20-22)	Build the documentation. It consists of three parts: online-help, html-files and pdf-version.

(20) Build the online-help.

		 Note that include-maxima.texi needs to have been built by configure.lisp.

(20a)	If copied from the tarball in step (1a), move these files into a newly created directory doc/info/<documentation from tarball>.

(20b)	Install perl from strawberry.

(20c)	Download makeinfo.exe from http://gnuwin32.sourceforge.net/packages/texinfo.html

(20d)	From a windows shell cd to doc/info.

(20e)	Run

			"C:\Program Files (x86)\Makeinfo\bin\makeinfo.exe" maxima.texi

			perl ./build_index.pl maxima.info :crlf> maxima-index.lisp
		
			The first step creates the *.info* files. The second step creates maxima-index.lisp.
			
(20f)	Copy these files into a newly created directory doc/info/<documentation self-built>.

(21)	Build the html files.

			Note that include-maxima.texi and texi2html.init need to have been built by configure.lisp.
			Make-html.lisp, extract-categories.lisp and pregexp-standalone.lisp need to have been included in doc/info.
			A fix needs to have beeen made to the perl script texi2html.

(21a)	From a Windows shell cd to directory doc/info, start sbcl (or use emacs/slime) and then do

			(load pregexp-standalone.lisp)	; This is a stand-alone version of share/stringproc/pregexp.lisp with (in-package :maxima) outcommented.
			(load make-html.lisp)						; This is Michel's script.lisp which loads extract-categories.lisp

			This creates the html files of the documentation in doc/info.
			(A temporary directory is created during this process in TMPDIR (c:/users/<username>/AppData/Local/Temp and later deleted.)
			
			Alternatively to make-html.lisp, make-html-threaded.lisp can be loaded, which itself loads extract-categories-threaded.lisp. 
			This is Michel's multithreaded version.
			
(20f)	Copy the html files into directory doc/info/<documentation self-built>.

(22) Build the pdf version under linux or cygwin.
			
(23) Include gnuplot.
		 Download from sourceforge the zip-file containing gnuplot's source code. Rightclick on the file and selct "extract all".
		 When asked about the destination directory, enter the top level directory of the Maxima build. Extract the zip file. This
		 will create a folder "gnuplot" in Maxima's top level directory.
		 See Andrej's mail from Feb 15, 2017 and Jinsong's mails from Jan 28,29, 2017.
		 
(24) Include wxMaxima from installer or build it from source. 
		 See Gunter's mails from Sept 17,23, 2016 and my mail from Sept 22, 2016 for including wxMaxima from a Maxima installer.
		 See Jinsong's and Gunters mails from Jan 29, 2017 for building and connecting wxMaxima from source.
		
